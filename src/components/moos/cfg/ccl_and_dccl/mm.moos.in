ServerHost = localhost

#if _MODEM_ID_ == 1
#define _OTHER_ID_ 2
ServerPort = 9101
Community  = mm1
#elif _MODEM_ID_ == 2
#define _OTHER_ID_ 1
ServerPort = 9102
Community  = mm2
#else
#error Invalid _MODEM_ID_
#endif

LatOrigin = 0
LongOrigin = 0


ProcessConfig = ANTLER
{
    MSBetweenLaunches = 10
    Run = MOOSDB		@ NewConsole = false
    Run = pAcommsHandler        @ NewConsole = true, XConfig = 1
    Run = uXMS                  @ NewConsole = true, XConfig = 2
#if _MODEM_ID_ == 1
    1 = -geometry,80x100+0+0
    2 = -geometry,80x15+100+230
#else
    1 = -geometry,80x100-0+0
    2 = -geometry,80x15-100+230
#endif
}

ProcessConfig = pAcommsHandler
{
    common { 
        log: false
        verbosity: DEBUG2
        show_gui: false
        initializer { type: INI_DOUBLE  moos_var: "STATUS_DESTINATION" dval: _OTHER_ID_ }
#if _MODEM_ID_ == 1
        initializer { type: INI_STRING  moos_var: "REMUS_STATUS_REPORT_OUT"  
            sval: "@PB[goby.acomms.protobuf.CCLMDATState] latitude: 42.5  longitude: -10.56  fix_age: 3  time_date: 1360620606000000  heading: 195  depth: 345  mission_mode: NORMAL  faults: \"\\000\\000\\000\\000\" faults_2: \"0\" mission_leg: 1  est_velocity: 1.5  objective_index: \"\\000\" watts: 20  lat_goal: 42.49  lon_goal: -10.54  battery_percent: 85  gfi_pitch_oil { gfi: 0  pitch: 3  oil: 80 }"
        }
        initializer { type: INI_STRING  moos_var: "DEPTH" sval: "depth:=23" }
#endif


    }
    modem_id: _MODEM_ID_
#if _DRIVER_ == 1 
    driver_type: DRIVER_UDP
    driver_cfg {
        [UDPDriverConfig.local] { 
#if _MODEM_ID_ == 1
            port: 34356
#else
            port: 34355 
#endif
        }
        [UDPDriverConfig.remote] { 
            ip: "127.0.0.1" 
#if _MODEM_ID_ == 1
            port: 34355
#else
            port: 34356
#endif
        }
        [UDPDriverConfig.max_frame_size]: 1024
    }
#elif _DRIVER_ == 2
    driver_type: DRIVER_WHOI_MICROMODEM
    driver_cfg {
//       connection_type: CONNECTION_SERIAL
         connection_type: CONNECTION_TCP_AS_CLIENT
         tcp_server: "unicornsim.mit.edu"
#if _MODEM_ID_ == 1
//        serial_port: "/dev/ttyUSB0"
         tcp_port: 54000
#else
//        serial_port: "/dev/ttyUSB1"
         tcp_port: 54001
#endif
        [micromodem.protobuf.Config.reset_nvram]: true
    }        
#else
#error Invalid driver
#endif
    mac_cfg {
        type: MAC_FIXED_DECENTRALIZED        
        slot { src: 1 type: DATA slot_seconds: 10 }
        slot { src: 2 type: DATA slot_seconds: 10 }
    }
    queue_cfg {
        message_entry {
            protobuf_name: "goby.acomms.protobuf.CCLMDATState"
            ack: false
            blackout_time: 10
            ttl: 300
            value_base: 1.5
            role { 
                type: SOURCE_ID 
                setting: STATIC
                static_value: _MODEM_ID_
            }
            role { type: TIMESTAMP  field: "time_date" }
#if _MODEM_ID_ == 2
            manipulator: NO_QUEUE
#endif
        }
    }

    translator_entry {
        protobuf_name: "goby.acomms.protobuf.CCLMDATState"
        trigger { type: TRIGGER_TIME  period: 5  }
        create {
            technique: TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
            moos_var: "REMUS_STATUS_REPORT_OUT" 
        }
        publish {
            technique: TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
            moos_var: "REMUS_STATUS_REPORT_IN"
        }
    }



    load_shared_library: "/home/toby/goby/2.0/lib/libgoby_ccl_compat.so"    
}

ProcessConfig = uXMS
{
#if _MODEM_ID_ == 1
    VAR = REMUS_STATUS_REPORT_OUT
#else
    VAR = REMUS_STATUS_REPORT_IN
#endif
}
