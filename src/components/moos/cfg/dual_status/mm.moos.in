ServerHost = localhost

#if _MODEM_ID_ == 1
#define _OTHER_ID_ 2
ServerPort = 9101
Community  = mm1
#elif _MODEM_ID_ == 2
#define _OTHER_ID_ 1
ServerPort = 9102
Community  = mm2
#else
#error Invalid _MODEM_ID_
#endif

LatOrigin = 0
LongOrigin = 0


ProcessConfig = ANTLER
{
    MSBetweenLaunches = 10
    Run = MOOSDB		@ NewConsole = false
    Run = pAcommsHandler        @ NewConsole = true, XConfig = 1
    Run = uXMS                  @ NewConsole = true, XConfig = 2
#if _MODEM_ID_ == 1
    1 = -geometry,80x100+0+0
    2 = -geometry,80x15+100+230
#else
    1 = -geometry,80x100-0+0
    2 = -geometry,80x15-100+230
#endif
}

ProcessConfig = pAcommsHandler
{
    common { 
        log: false
        verbosity: DEBUG1
        show_gui: true
        initializer { type: INI_DOUBLE  moos_var: "STATUS_DESTINATION" dval: _OTHER_ID_ }
        initializer { type: INI_STRING  moos_var: "STATUS_REPORT_OUT"  
#if _MODEM_ID_ == 1
            sval: "x=150,y=200,speed=1.4,heading=125"
#else
            sval: "x=550,y=125,speed=1.6,heading=213"
#endif
        }
#if _MODEM_ID_ == 1
        initializer { type: INI_STRING  moos_var: "DEPTH" sval: "depth:=23" }
#else
        initializer { type: INI_STRING  moos_var: "DEPTH" sval: "depth:=20" }
#endif
    }
    modem_id: _MODEM_ID_
#if _DRIVER_ == 1 
    driver_cfg {
        driver_type: DRIVER_UDP_MULTICAST
        [goby.acomms.udp_multicast.protobuf.config] {        
          multicast_address: "239.142.0.1"
          multicast_port: 50021
          max_frame_size: 1024
        }
    }
#elif _DRIVER_ == 2
    driver_cfg {
         driver_type: DRIVER_WHOI_MICROMODEM
         connection_type: CONNECTION_SERIAL
#if _MODEM_ID_ == 1
        serial_port: "/dev/ttyUSB0"
#else
        serial_port: "/dev/ttyUSB1"
#endif
        [goby.acomms.micromodem.protobuf.config] {
            reset_nvram: true
        }
    }        
#else
#error Invalid driver
#endif
    mac_cfg {
        type: MAC_FIXED_DECENTRALIZED        
        slot { src: 1 type: DATA slot_seconds: 10 }
        slot { src: 2 type: DATA slot_seconds: 10 }
    }
    queue_cfg {
        message_entry {
            protobuf_name: "goby.example.SimpleStatus"
            ack: false
            blackout_time: 10
            ttl: 300
            value_base: 1.5
            role { type: SOURCE_ID       field: "src"      }
            role { type: DESTINATION_ID  field: "dest"      }
            role { type: TIMESTAMP       field: "timestamp" }
        }
    }

    translator_entry {
        protobuf_name: "goby.example.SimpleStatus"
        trigger { type: TRIGGER_TIME  period: 5  }
        create {
            technique: TECHNIQUE_FORMAT
            moos_var: "DB_TIME"
            format: "%1%"
        }
        create {
            technique: TECHNIQUE_FORMAT
            moos_var: "MODEM_ID"
            format: "%2%"
        }
        create {
            technique: TECHNIQUE_FORMAT
            moos_var: "STATUS_DESTINATION"
            format: "%3%"
        }
        create {
            technique: TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
            moos_var: "STATUS_REPORT_OUT"
        }
        create {
            technique: TECHNIQUE_FORMAT
            moos_var: "DEPTH"
            format: "depth:=%14%"
        }
        publish {
            technique: TECHNIQUE_COMMA_SEPARATED_KEY_EQUALS_VALUE_PAIRS
            moos_var: "STATUS_REPORT_IN"
        }
        publish {
            technique: TECHNIQUE_PREFIXED_PROTOBUF_TEXT_FORMAT
            moos_var: "STATUS_REPORT_IN_PB"
        }
    }


    load_shared_library: "../../../../../build/lib/libgobyexample_protobuf.so"    
}

ProcessConfig = uXMS
{
    VAR = STATUS_REPORT_OUT
    VAR = STATUS_REPORT_IN, STATUS_REPORT_IN_PB
}
